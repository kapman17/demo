name: 'Create Tag & Publish Release'

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'

jobs:
  create-tag:
    name: Read the version and push tag
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      tag: ${{ steps.currentVersion.outputs.version }}
      target_commitish: ${{ steps.currentVersion.outputs.commit }}
      next_version: ${{ steps.nextVersion.outputs.nextVersion }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0
      - name: 'Get Previous tag'
        id: previousTag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 1.0.0 # Optional fallback tag to use when no tag can be found
      - name: Get current version
        id: currentVersion
        run: |
          cd demo
          # reads the version from the gradle.properties
          VERSION=$(awk -F= '$1=="applicationVersion"{print $2}' gradle.properties)
          echo "Current version is ${VERSION}"
          echo "Latest tag is ${{ steps.previousTag.outputs.tag }}"
          # set the version as output of this step
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm install semver
      - name: Calculate next version
        id: nextVersion
        uses: actions/github-script@v6
        with:
          script: |
            const semver = require('semver');
            const version = "${{ steps.currentVersion.outputs.version }}";
            const latestTag = "${{ steps.previousTag.outputs.tag }}";
            if (!semver.valid(version)) {
              core.setFailed("Version must follow form x.y.z");
            }
            if (!semver.gt(version, latestTag)) {
              core.setFailed("Current version must be greater than previous version/tag");
            }
            const pieces = version.split(".");
            // naive: bump the 'patch' component
            const nextVersion = pieces[0] + "." + pieces[1] + "." + (parseInt(pieces[2]) + 1);
            core.setOutput('nextVersion', nextVersion);
      - name: Push the tag
        uses: anothrNick/github-tag-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CUSTOM_TAG: ${{ steps.currentVersion.outputs.version }}
  publish-release:
    name: Publish release with automatically generated release notes
    runs-on: ubuntu-latest
    needs: create-tag
    steps:
      - uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ needs.create-tag.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          target_commitish: ${{ needs.create-tag.outputs.target_commitish }}